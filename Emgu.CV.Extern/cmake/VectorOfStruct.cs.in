//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2014 by EMGU Corporation. All rights reserved.
//
//  Vector of ${VECTOR_NAME}
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------

using System;
using System.Drawing;
using System.Diagnostics;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using Emgu.CV.Structure;
#if !NETFX_CORE
using System.Runtime.Serialization;
#endif

namespace ${NAMESPACE_CS}
{
   /// <summary>
   /// Wraped class of the C++ standard vector of ${VECTOR_NAME}.
   /// </summary>
#if !NETFX_CORE
   [Serializable]
   [DebuggerTypeProxy(typeof(VectorOf${VECTOR_NAME}.DebuggerProxy))]
#endif
   public partial class VectorOf${VECTOR_NAME} : Emgu.Util.UnmanagedObject, IInputArray, IOutputArray, IInputOutputArray
#if !NETFX_CORE
   , ISerializable
#endif
   {
      private bool _needDispose;
   
      static VectorOf${VECTOR_NAME}()
      {
         CvInvoke.CheckLibraryLoaded();
      }

      private IntPtr _inputArrayPtr;
      private IntPtr _outputArrayPtr;
      private IntPtr _inputOutputArrayPtr;

#if !NETFX_CORE
      /// <summary>
      /// Constructor used to deserialize runtime serialized object
      /// </summary>
      /// <param name="info">The serialization info</param>
      /// <param name="context">The streaming context</param>
      public VectorOf${VECTOR_NAME}(SerializationInfo info, StreamingContext context)
         : this()
      {
         Push((${VECTOR_ELEMENT_CS}[])info.GetValue("${VECTOR_NAME}Array", typeof(${VECTOR_ELEMENT_CS}[])));
      }
	  
	  /// <summary>
      /// A function used for runtime serialization of the object
      /// </summary>
      /// <param name="info">Serialization info</param>
      /// <param name="context">Streaming context</param>
      public void GetObjectData(SerializationInfo info, StreamingContext context)
      {
         info.AddValue("${VECTOR_NAME}Array", ToArray());
      }
#endif

      /// <summary>
      /// Create an empty standard vector of ${VECTOR_NAME}
      /// </summary>
      public VectorOf${VECTOR_NAME}()
         : this(VectorOf${VECTOR_NAME}Create(), true)
      {
      }
	  
	  internal VectorOf${VECTOR_NAME}(IntPtr ptr, bool needDispose)
      {
         _ptr = ptr;
         _needDispose = needDispose;
      }

      /// <summary>
      /// Create an standard vector of ${VECTOR_NAME} of the specific size
      /// </summary>
      /// <param name="size">The size of the vector</param>
      public VectorOf${VECTOR_NAME}(int size)
         : this( VectorOf${VECTOR_NAME}CreateSize(size), true)
      {
      }
	  
	  /// <summary>
      /// Create an standard vector of ${VECTOR_NAME} with the initial values
      /// </summary>
      /// <param name="values">The initial values</param>
	  public VectorOf${VECTOR_NAME}(${VECTOR_ELEMENT_CS}[] values)
         :this()
      {
         Push(values);
      }
	  
      /// <summary>
      /// Push an array of value into the standard vector
      /// </summary>
      /// <param name="value">The value to be pushed to the vector</param>
      public void Push(${VECTOR_ELEMENT_CS}[] value)
      {
         if (value.Length > 0)
         {
            GCHandle handle = GCHandle.Alloc(value, GCHandleType.Pinned);
            VectorOf${VECTOR_NAME}PushMulti(_ptr, handle.AddrOfPinnedObject(), value.Length);
            handle.Free();
         }
      }
	  
	  /// <summary>
      /// Convert the standard vector to an array of ${VECTOR_NAME}
      /// </summary>
      /// <returns>An array of ${VECTOR_NAME}</returns>
      public ${VECTOR_ELEMENT_CS}[] ToArray()
      {
         ${VECTOR_ELEMENT_CS}[] res = new ${VECTOR_ELEMENT_CS}[Size];
         if (res.Length > 0)
         {
            GCHandle handle = GCHandle.Alloc(res, GCHandleType.Pinned);
            VectorOf${VECTOR_NAME}CopyData(_ptr, handle.AddrOfPinnedObject());
            handle.Free();
         }
         return res;
      }

      /// <summary>
      /// Get the size of the vector
      /// </summary>
      public int Size
      {
         get
         {
            return VectorOf${VECTOR_NAME}GetSize(_ptr);
         }
      }

      /// <summary>
      /// Clear the vector
      /// </summary>
      public void Clear()
      {
         VectorOf${VECTOR_NAME}Clear(_ptr);
      }

      /// <summary>
      /// The pointer to the first element on the vector. In case of an empty vector, IntPtr.Zero will be returned.
      /// </summary>
      public IntPtr StartAddress
      {
         get
         {
            return VectorOf${VECTOR_NAME}GetStartAddress(_ptr);
         }
      }
	  
	  /// <summary>
      /// Get the item in the specific index
      /// </summary>
      /// <param name="index">The index</param>
      /// <returns>The item in the specific index</returns>
      public ${VECTOR_ELEMENT_CS} this[int index]
      {
         get
         {
            ${VECTOR_ELEMENT_CS} result = new ${VECTOR_ELEMENT_CS}();
            VectorOf${VECTOR_NAME}GetItem(_ptr, index, ref result);
            return result;
         }
      }

      /// <summary>
      /// Release the standard vector
      /// </summary>
      protected override void DisposeObject()
      {
         if (_needDispose && _ptr != IntPtr.Zero)
            VectorOf${VECTOR_NAME}Release(ref _ptr);

         if (_inputArrayPtr != IntPtr.Zero)
            CvInvoke.cveInputArrayRelease(ref _inputArrayPtr);

         if (_outputArrayPtr != IntPtr.Zero)
            CvInvoke.cveOutputArrayRelease(ref _outputArrayPtr);

         if (_inputOutputArrayPtr != IntPtr.Zero)
            CvInvoke.cveInputOutputArrayRelease(ref _inputOutputArrayPtr);
      }

	  /// <summary>
      /// Get the pointer to cv::_InputArray
      /// </summary>
      public IntPtr InputArrayPtr
      {
         get
         {
            if (_inputArrayPtr == IntPtr.Zero)
               _inputArrayPtr = cvInputArrayFromVectorOf${VECTOR_NAME}(_ptr);
            return _inputArrayPtr;
         }
      }
	  
	  /// <summary>
      /// Get the pointer to cv::_OutputArray
      /// </summary>
      public IntPtr OutputArrayPtr
      {
         get
         {
            if (_outputArrayPtr == IntPtr.Zero)
               _outputArrayPtr = cvOutputArrayFromVectorOf${VECTOR_NAME}(_ptr);
            return _outputArrayPtr;
         }
      }

	  /// <summary>
      /// Get the pointer to cv::_InputOutputArray
      /// </summary>
      public IntPtr InputOutputArrayPtr
      {
         get
         {
            if (_inputOutputArrayPtr == IntPtr.Zero)
               _inputOutputArrayPtr = cvInputOutputArrayFromVectorOf${VECTOR_NAME}(_ptr);
            return _inputOutputArrayPtr;
         }
      }
	  
	  internal class DebuggerProxy
      {
         private VectorOf${VECTOR_NAME} _v;

         public DebuggerProxy(VectorOf${VECTOR_NAME} v)
         {
            _v = v;
         }

         public ${VECTOR_ELEMENT_CS}[] Values
         {
            get { return _v.ToArray(); }
         }
      }

      [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
      internal static extern IntPtr VectorOf${VECTOR_NAME}Create();

      [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
      internal static extern IntPtr VectorOf${VECTOR_NAME}CreateSize(int size);

      [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
      internal static extern void VectorOf${VECTOR_NAME}Release(ref IntPtr v);

      [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
      internal static extern int VectorOf${VECTOR_NAME}GetSize(IntPtr v);

      [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
      internal static extern void VectorOf${VECTOR_NAME}CopyData(IntPtr v, IntPtr data);

      [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
      internal static extern IntPtr VectorOf${VECTOR_NAME}GetStartAddress(IntPtr v);

      [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
      internal static extern void VectorOf${VECTOR_NAME}PushMulti(IntPtr v, IntPtr values, int count);

      [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
      internal static extern void VectorOf${VECTOR_NAME}Clear(IntPtr v);

	  [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
      internal static extern void VectorOf${VECTOR_NAME}GetItem(IntPtr vec, int index, ref ${VECTOR_ELEMENT_CS} element);
	  
      [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
      internal static extern IntPtr cvInputArrayFromVectorOf${VECTOR_NAME}(IntPtr vec);

      [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
      internal static extern IntPtr cvOutputArrayFromVectorOf${VECTOR_NAME}(IntPtr vec);

      [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
      internal static extern IntPtr cvInputOutputArrayFromVectorOf${VECTOR_NAME}(IntPtr vec);
   }
}
