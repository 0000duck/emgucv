Index: cmake/OpenCVDetectTBB.cmake
===================================================================
--- cmake/OpenCVDetectTBB.cmake	(revision 8283)
+++ cmake/OpenCVDetectTBB.cmake	(working copy)
@@ -41,12 +41,20 @@
       else()
         get_filename_component(_TBB_LIB_PATH "${TBB_INCLUDE_DIRS}/../lib" ABSOLUTE)
 
-        if(CMAKE_SYSTEM_PROCESSOR MATCHES amd64*|x86_64* OR MSVC64)
-          set(_TBB_LIB_PATH "${_TBB_LIB_PATH}/intel64")
-        else()
-          set(_TBB_LIB_PATH "${_TBB_LIB_PATH}/ia32")
-        endif()
-
+		if (MSVC)
+            if(CMAKE_CL_64)
+                set(_TBB_LIB_PATH "${_TBB_LIB_PATH}/intel64")
+            else()
+                set(_TBB_LIB_PATH "${_TBB_LIB_PATH}/ia32")
+            endif()
+        else(MSVC)
+            if(${CMAKE_SYSTEM_PROCESSOR} MATCHES amd64*|x86_64* OR MSVC64)
+                set(_TBB_LIB_PATH "${_TBB_LIB_PATH}/intel64")
+            elseif(${CMAKE_SYSTEM_PROCESSOR} MATCHES x86*|i386*|i686*)
+                set(_TBB_LIB_PATH "${_TBB_LIB_PATH}/ia32")
+            endif()
+        endif(MSVC)
+		
         if(MSVC80)
           set(_TBB_LIB_PATH "${_TBB_LIB_PATH}/vc8")
         elseif(MSVC90)
Index: modules/gpu/src/split_merge.cpp
===================================================================
--- modules/gpu/src/split_merge.cpp	(revision 8283)
+++ modules/gpu/src/split_merge.cpp	(working copy)
@@ -96,12 +96,13 @@
         CV_Assert(single_channel_only);
         CV_Assert(total_channels <= 4);
 
+        dst.create(size, CV_MAKETYPE(depth, total_channels));
         if (total_channels == 1)
-            src[0].copyTo(dst);
+        {
+            cudaSafeCall( cudaMemcpy2DAsync(dst.data, dst.step, src[0].data, src[0].step, src[0].cols * src[0].elemSize(), src[0].rows, cudaMemcpyDeviceToDevice, stream) );
+        }
         else
         {
-            dst.create(size, CV_MAKETYPE(depth, total_channels));
-
             DevMem2Db src_as_devmem[4];
             for(size_t i = 0; i < n; ++i)
                 src_as_devmem[i] = src[i];
@@ -129,7 +130,8 @@
 
         if (num_channels == 1)
         {
-            src.copyTo(dst[0]);
+            dst[0].create(src.size(), depth);
+            cudaSafeCall( cudaMemcpy2DAsync(dst[0].data, dst[0].step, src.data, src.step, src.cols * src.elemSize(), src.rows, cudaMemcpyDeviceToDevice, stream) );
             return;
         }
 
Index: modules/highgui/include/opencv2/highgui/highgui_c.h
===================================================================
--- modules/highgui/include/opencv2/highgui/highgui_c.h	(revision 8283)
+++ modules/highgui/include/opencv2/highgui/highgui_c.h	(working copy)
@@ -534,6 +534,9 @@
 // Return the type of the capturer (eg, CV_CAP_V4W, CV_CAP_UNICAP), which is unknown if created with CV_CAP_ANY
 CVAPI(int)    cvGetCaptureDomain( CvCapture* capture);  
 
+// Return a pointer to the xn::Context of OpenNI from the CvCapture)
+CVAPI(void*) cvGetOpenniCaptureContext( CvCapture* capture);
+
 /* "black box" video file writer structure */
 typedef struct CvVideoWriter CvVideoWriter;
 
Index: modules/highgui/src/cap_openni.cpp
===================================================================
--- modules/highgui/src/cap_openni.cpp	(revision 8283)
+++ modules/highgui/src/cap_openni.cpp	(working copy)
@@ -433,6 +433,8 @@
 
     bool isOpened() const;
 
+    xn::Context* getOpenNIContext() { return &context; }
+
 protected:
     struct OutputMap
     {
@@ -1359,4 +1361,10 @@
     return 0;
 }
 
+// Return a pointer to the xn::Context of OpenNI from the CvCapture)
+void* cvGetOpenniCaptureContext( CvCapture* capture)
+{
+   CvCapture_OpenNI* openniCapture = (CvCapture_OpenNI*) capture;
+   return openniCapture->getOpenNIContext();
+}
 #endif
Index: modules/legacy/src/3dtracker.cpp
===================================================================
--- modules/legacy/src/3dtracker.cpp	(revision 8283)
+++ modules/legacy/src/3dtracker.cpp	(working copy)
@@ -331,7 +331,7 @@
     int i;
     int x, y;
     CvPoint prev_pt = { 0, 0 };
-    static const CvScalar rgb_colors[] = {
+    static CvScalar rgb_colors[] = {
         {{0,0,255}},
         {{0,128,255}},
         {{0,200,200}},
@@ -339,10 +339,10 @@
         {{200,200,0}},
         {{255,0,0}},
         {{255,0,255}} };
-    static const CvScalar gray_colors[] = {
+    static CvScalar gray_colors[] = {
         {{80}}, {{120}}, {{160}}, {{200}}, {{100}}, {{140}}, {{180}}
     };
-    const CvScalar* colors = img->nChannels == 3 ? rgb_colors : gray_colors;
+    CvScalar* colors = img->nChannels == 3 ? rgb_colors : gray_colors;
 
     CvScalar color = colors[0];
     for (y = 0, i = 0; y < etalon_size.height; y++)
