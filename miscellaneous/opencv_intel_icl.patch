Index: 3rdparty/ffmpeg/CMakeLists.txt
===================================================================
--- 3rdparty/ffmpeg/CMakeLists.txt	(revision 7288)
+++ 3rdparty/ffmpeg/CMakeLists.txt	(working copy)
@@ -7,8 +7,7 @@
 set(module_bare_name "opencv_ffmpeg${FFMPEG_SUFFIX}.dll")
 set(module_name "${CMAKE_CURRENT_SOURCE_DIR}/${module_bare_name}")
 
-get_target_property(bin_dir opencv_traincascade LOCATION)
-get_filename_component(bin_dir ${bin_dir} PATH) 
+set (bin_dir ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
 
 message(STATUS "ffmpeg output dir: ${bin_dir}")
 
@@ -17,4 +16,4 @@
                     ${module_name} ${bin_dir}/${module_bare_name}
                   COMMENT "Copying ${module_name} to the output directory")
 
-install(FILES ${module_name} DESTINATION bin COMPONENT main)
+install(FILES ${module_name} DESTINATION "bin${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER}" COMPONENT main)
Index: cmake/OpenCVDetectTBB.cmake
===================================================================
--- cmake/OpenCVDetectTBB.cmake	(revision 7288)
+++ cmake/OpenCVDetectTBB.cmake	(working copy)
@@ -35,12 +35,20 @@
       else()
         get_filename_component(_TBB_LIB_PATH "${TBB_INCLUDE_DIR}/../lib" ABSOLUTE)
 
-        if(CMAKE_SYSTEM_PROCESSOR MATCHES amd64*|x86_64* OR MSVC64)
-          set(_TBB_LIB_PATH "${_TBB_LIB_PATH}/intel64")
-        else()
-          set(_TBB_LIB_PATH "${_TBB_LIB_PATH}/ia32")
-        endif()
-
+		if (MSVC)
+            if(CMAKE_CL_64)
+                set(_TBB_LIB_PATH "${_TBB_LIB_PATH}/intel64")
+            else()
+                set(_TBB_LIB_PATH "${_TBB_LIB_PATH}/ia32")
+            endif()
+        else(MSVC)
+            if(${CMAKE_SYSTEM_PROCESSOR} MATCHES amd64*|x86_64* OR MSVC64)
+                set(_TBB_LIB_PATH "${_TBB_LIB_PATH}/intel64")
+            elseif(${CMAKE_SYSTEM_PROCESSOR} MATCHES x86*|i386*|i686*)
+                set(_TBB_LIB_PATH "${_TBB_LIB_PATH}/ia32")
+            endif()
+        endif(MSVC)
+		
         if(MSVC80)
           set(_TBB_LIB_PATH "${_TBB_LIB_PATH}/vc8")
         elseif(MSVC90)
Index: modules/highgui/include/opencv2/highgui/highgui_c.h
===================================================================
--- modules/highgui/include/opencv2/highgui/highgui_c.h	(revision 7288)
+++ modules/highgui/include/opencv2/highgui/highgui_c.h	(working copy)
@@ -462,6 +462,9 @@
 // Return the type of the capturer (eg, CV_CAP_V4W, CV_CAP_UNICAP), which is unknown if created with CV_CAP_ANY
 CVAPI(int)    cvGetCaptureDomain( CvCapture* capture);  
 
+// Return a pointer to the xn::Context of OpenNI from the CvCapture)
+CVAPI(void*) cvGetOpenniCaptureContext( CvCapture* capture);
+
 /* "black box" video file writer structure */
 typedef struct CvVideoWriter CvVideoWriter;
 
Index: modules/highgui/src/cap_openni.cpp
===================================================================
--- modules/highgui/src/cap_openni.cpp	(revision 7288)
+++ modules/highgui/src/cap_openni.cpp	(working copy)
@@ -98,6 +98,8 @@
 
     bool isOpened() const;
 
+    xn::Context* getOpenNIContext() { return &context; }
+
 protected:
     struct OutputMap
     {
@@ -763,4 +765,10 @@
     return 0;
 }
 
+// Return a pointer to the xn::Context of OpenNI from the CvCapture)
+void* cvGetOpenniCaptureContext( CvCapture* capture)
+{
+   CvCapture_OpenNI* openniCapture = (CvCapture_OpenNI*) capture;
+   return openniCapture->getOpenNIContext();
+}
 #endif
Index: modules/legacy/src/3dtracker.cpp
===================================================================
--- modules/legacy/src/3dtracker.cpp	(revision 7288)
+++ modules/legacy/src/3dtracker.cpp	(working copy)
@@ -331,7 +331,7 @@
     int i;
     int x, y;
     CvPoint prev_pt = { 0, 0 };
-    static const CvScalar rgb_colors[] = {
+    static CvScalar rgb_colors[] = {
         {{0,0,255}},
         {{0,128,255}},
         {{0,200,200}},
@@ -339,10 +339,10 @@
         {{200,200,0}},
         {{255,0,0}},
         {{255,0,255}} };
-    static const CvScalar gray_colors[] = {
+    static CvScalar gray_colors[] = {
         {{80}}, {{120}}, {{160}}, {{200}}, {{100}}, {{140}}, {{180}}
     };
-    const CvScalar* colors = img->nChannels == 3 ? rgb_colors : gray_colors;
+    CvScalar* colors = img->nChannels == 3 ? rgb_colors : gray_colors;
 
     CvScalar color = colors[0];
     for (y = 0, i = 0; y < etalon_size.height; y++)
