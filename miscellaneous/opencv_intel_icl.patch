Index: 3rdparty/ffmpeg/CMakeLists.txt
===================================================================
--- 3rdparty/ffmpeg/CMakeLists.txt	(revision 6135)
+++ 3rdparty/ffmpeg/CMakeLists.txt	(working copy)
@@ -7,8 +7,7 @@
 set(module_bare_name "opencv_ffmpeg${FFMPEG_SUFFIX}.dll")
 set(module_name "${CMAKE_CURRENT_SOURCE_DIR}/${module_bare_name}")
 
-get_target_property(bin_dir opencv_traincascade LOCATION)
-get_filename_component(bin_dir ${bin_dir} PATH) 
+set (bin_dir ${LIBRARY_OUTPUT_PATH})
 
 message(STATUS "ffmpeg output dir: ${bin_dir}")
 
Index: CMakeLists.txt
===================================================================
--- CMakeLists.txt	(revision 6135)
+++ CMakeLists.txt	(working copy)
@@ -728,18 +728,26 @@
             elseif (UNIX)
                 set(OPENCV_LINKER_LIBS ${OPENCV_LINKER_LIBS} tbb)
             elseif (WIN32)
-                if (CMAKE_COMPILER_IS_GNUCXX)
-                    set(TBB_LIB_DIR "${TBB_INCLUDE_DIR}/../lib" CACHE PATH "Full path of TBB library directory")
-                    link_directories("${TBB_LIB_DIR}")
-                    set(OPENCV_LINKER_LIBS ${OPENCV_LINKER_LIBS} tbb)
-                else()
-                    get_filename_component(_TBB_LIB_PATH "${TBB_INCLUDE_DIR}/../lib" ABSOLUTE)                          
-                   
-                    if(${CMAKE_SYSTEM_PROCESSOR} MATCHES amd64*|x86_64* OR MSVC64)
-                        set(_TBB_LIB_PATH "${_TBB_LIB_PATH}/intel64")
-                    elseif(${CMAKE_SYSTEM_PROCESSOR} MATCHES x86*|i386*|i686*)
-                        set(_TBB_LIB_PATH "${_TBB_LIB_PATH}/ia32")
-                    endif()
+				if (CMAKE_COMPILER_IS_GNUCXX)
+					set(TBB_LIB_DIR "${TBB_INCLUDE_DIR}/../lib" CACHE PATH "Full path of TBB library directory")
+					link_directories("${TBB_LIB_DIR}")
+					set(OPENCV_LINKER_LIBS ${OPENCV_LINKER_LIBS} tbb)
+				else()
+				    get_filename_component(_TBB_LIB_PATH "${TBB_INCLUDE_DIR}/../lib" ABSOLUTE)                         	
+				    if (MSVC)
+                       if(CMAKE_CL_64)
+                         set(_TBB_LIB_PATH "${_TBB_LIB_PATH}/intel64")
+                       else()
+                         set(_TBB_LIB_PATH "${_TBB_LIB_PATH}/ia32")
+                       endif()
+                    else()
+					  if(${CMAKE_SYSTEM_PROCESSOR} MATCHES amd64*|x86_64*)
+						set(_TBB_LIB_PATH "${_TBB_LIB_PATH}/intel64")
+                      endif()                   
+                      if(${CMAKE_SYSTEM_PROCESSOR} MATCHES x86*|i386*|i686*)
+						set(_TBB_LIB_PATH "${_TBB_LIB_PATH}/ia32")
+					  endif()
+					endif()
 
                     if (MSVC80)
                        set(_TBB_LIB_PATH "${_TBB_LIB_PATH}/vc8")
@@ -1397,11 +1405,11 @@
         install(DIRECTORY 3rdparty android modules doc DESTINATION "." COMPONENT src PATTERN ".svn" EXCLUDE)
 
         # install TBB dlls
-        if(WIN32 AND HAVE_TBB)
-            string(REGEX REPLACE "/lib" "/bin" TBB_DLL_DIR "${TBB_LIB_DIR}")
-            install(PROGRAMS "${TBB_DLL_DIR}/tbb.dll" DESTINATION bin COMPONENT main)
-            install(PROGRAMS "${TBB_DLL_DIR}/tbb_debug.dll" DESTINATION bin COMPONENT main)
-        endif()
+        #if(WIN32 AND HAVE_TBB)
+        #    string(REGEX REPLACE "/lib" "/bin" TBB_DLL_DIR "${TBB_LIB_DIR}")
+        #    install(PROGRAMS "${TBB_DLL_DIR}/tbb.dll" DESTINATION bin COMPONENT main)
+        #    install(PROGRAMS "${TBB_DLL_DIR}/tbb_debug.dll" DESTINATION bin COMPONENT main)
+        #endif()
     endif()
 endif()
 
Index: modules/highgui/include/opencv2/highgui/highgui_c.h
===================================================================
--- modules/highgui/include/opencv2/highgui/highgui_c.h	(revision 6135)
+++ modules/highgui/include/opencv2/highgui/highgui_c.h	(working copy)
@@ -410,6 +410,9 @@
 // Return the type of the capturer (eg, CV_CAP_V4W, CV_CAP_UNICAP), which is unknown if created with CV_CAP_ANY
 CVAPI(int)    cvGetCaptureDomain( CvCapture* capture);  
 
+// Return a pointer to the xn::Context of OpenNI from the CvCapture)
+CVAPI(void*) cvGetOpenniCaptureContext( CvCapture* capture);
+
 /* "black box" video file writer structure */
 typedef struct CvVideoWriter CvVideoWriter;
 
Index: modules/highgui/src/cap_openni.cpp
===================================================================
--- modules/highgui/src/cap_openni.cpp	(revision 6135)
+++ modules/highgui/src/cap_openni.cpp	(working copy)
@@ -98,6 +98,8 @@
 
     bool isOpened() const;
 
+    xn::Context* getOpenNIContext() { return &context; }
+
 protected:
     struct OutputMap
     {
@@ -685,4 +687,10 @@
     return 0;
 }
 
+// Return a pointer to the xn::Context of OpenNI from the CvCapture)
+void* cvGetOpenniCaptureContext( CvCapture* capture)
+{
+   CvCapture_OpenNI* openniCapture = (CvCapture_OpenNI*) capture;
+   return openniCapture->getOpenNIContext();
+}
 #endif
Index: modules/legacy/src/3dtracker.cpp
===================================================================
--- modules/legacy/src/3dtracker.cpp	(revision 6135)
+++ modules/legacy/src/3dtracker.cpp	(working copy)
@@ -331,7 +331,7 @@
     int i;
     int x, y;
     CvPoint prev_pt = { 0, 0 };
-    static const CvScalar rgb_colors[] = {
+    static CvScalar rgb_colors[] = {
         {{0,0,255}},
         {{0,128,255}},
         {{0,200,200}},
@@ -339,10 +339,10 @@
         {{200,200,0}},
         {{255,0,0}},
         {{255,0,255}} };
-    static const CvScalar gray_colors[] = {
+    static CvScalar gray_colors[] = {
         {{80}}, {{120}}, {{160}}, {{200}}, {{100}}, {{140}}, {{180}}
     };
-    const CvScalar* colors = img->nChannels == 3 ? rgb_colors : gray_colors;
+    CvScalar* colors = img->nChannels == 3 ? rgb_colors : gray_colors;
 
     CvScalar color = colors[0];
     for (y = 0, i = 0; y < etalon_size.height; y++)
Index: OpenCVFindOpenNI.cmake
===================================================================
--- OpenCVFindOpenNI.cmake	(revision 6135)
+++ OpenCVFindOpenNI.cmake	(working copy)
@@ -42,7 +42,7 @@
     endif()
 endif()
 
-find_library(OPENNI_LIBRARY "OpenNI" PATHS ${OPENNI_LIB_DIR} DOC "OpenNI library" NO_DEFAULT_PATH)
+find_library(OPENNI_LIBRARY "OpenNI" "openNI64" PATHS ${OPENNI_LIB_DIR} DOC "OpenNI library" NO_DEFAULT_PATH)
 find_path(OPENNI_INCLUDES "XnCppWrapper.h" PATHS ${OPENNI_INCLUDE_DIR} DOC "OpenNI c++ interface header" NO_DEFAULT_PATH)
 
 if(OPENNI_LIBRARY AND OPENNI_INCLUDES)
@@ -50,6 +50,9 @@
     # the check: are PrimeSensor Modules for OpenNI installed?
     if(WIN32)
         find_file(OPENNI_PRIME_SENSOR_MODULE "XnCore.dll" PATHS ${OPENNI_PRIME_SENSOR_MODULE_BIN_DIR} DOC "Core library of PrimeSensor Modules for OpenNI" NO_DEFAULT_PATH)
+		if(NOT OPENNI_PRIME_SENSOR_MODULE)
+		    find_file(OPENNI_PRIME_SENSOR_MODULE "XnCore64.dll" PATHS ${OPENNI_PRIME_SENSOR_MODULE_BIN_DIR} DOC "Core library of PrimeSensor Modules for OpenNI" NO_DEFAULT_PATH)
+		endif()
     elseif(UNIX OR APPLE)
         find_library(OPENNI_PRIME_SENSOR_MODULE "XnCore" PATHS ${OPENNI_PRIME_SENSOR_MODULE_BIN_DIR} DOC "Core library of PrimeSensor Modules for OpenNI" NO_DEFAULT_PATH)
     endif()
