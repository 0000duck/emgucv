Index: 3rdparty/libjasper/CMakeLists.txt
===================================================================
--- 3rdparty/libjasper/CMakeLists.txt	(revision 9064)
+++ 3rdparty/libjasper/CMakeLists.txt	(working copy)
@@ -39,6 +39,10 @@
   ARCHIVE_OUTPUT_DIRECTORY ${3P_LIBRARY_OUTPUT_PATH}
   )
 
+IF(DEFINED EMGUCV_PLATFORM_TOOLSET)
+  set_target_properties(${JASPER_LIBRARY} PROPERTIES PLATFORM_TOOLSET ${EMGUCV_PLATFORM_TOOLSET})
+ENDIF()
+
 if(ENABLE_SOLUTION_FOLDERS)
   set_target_properties(${JASPER_LIBRARY} PROPERTIES FOLDER "3rdparty")
 endif()
Index: 3rdparty/libjpeg/CMakeLists.txt
===================================================================
--- 3rdparty/libjpeg/CMakeLists.txt	(revision 9064)
+++ 3rdparty/libjpeg/CMakeLists.txt	(working copy)
@@ -33,6 +33,10 @@
   ARCHIVE_OUTPUT_DIRECTORY ${3P_LIBRARY_OUTPUT_PATH}
   )
 
+IF(DEFINED EMGUCV_PLATFORM_TOOLSET)
+  set_target_properties(${JPEG_LIBRARY} PROPERTIES PLATFORM_TOOLSET ${EMGUCV_PLATFORM_TOOLSET})
+ENDIF()
+
 if(ENABLE_SOLUTION_FOLDERS)
   set_target_properties(${JPEG_LIBRARY} PROPERTIES FOLDER "3rdparty")
 endif()
Index: 3rdparty/libpng/CMakeLists.txt
===================================================================
--- 3rdparty/libpng/CMakeLists.txt	(revision 9064)
+++ 3rdparty/libpng/CMakeLists.txt	(working copy)
@@ -33,6 +33,10 @@
   set_target_properties(${PNG_LIBRARY} PROPERTIES FOLDER "3rdparty")
 endif()
 
+IF(DEFINED EMGUCV_PLATFORM_TOOLSET)
+  set_target_properties(${PNG_LIBRARY} PROPERTIES PLATFORM_TOOLSET ${EMGUCV_PLATFORM_TOOLSET})
+ENDIF()
+
 if(NOT BUILD_SHARED_LIBS)
   install(TARGETS ${PNG_LIBRARY} ARCHIVE DESTINATION ${OPENCV_3P_LIB_INSTALL_PATH} COMPONENT main)
 endif()
Index: 3rdparty/libtiff/CMakeLists.txt
===================================================================
--- 3rdparty/libtiff/CMakeLists.txt	(revision 9064)
+++ 3rdparty/libtiff/CMakeLists.txt	(working copy)
@@ -105,6 +105,10 @@
     ARCHIVE_OUTPUT_DIRECTORY ${3P_LIBRARY_OUTPUT_PATH}
     )
 
+IF(DEFINED EMGUCV_PLATFORM_TOOLSET)
+  set_target_properties(${TIFF_LIBRARY} PROPERTIES PLATFORM_TOOLSET ${EMGUCV_PLATFORM_TOOLSET})
+ENDIF()
+
 if(ENABLE_SOLUTION_FOLDERS)
   set_target_properties(${TIFF_LIBRARY} PROPERTIES FOLDER "3rdparty")
 endif()
Index: 3rdparty/zlib/CMakeLists.txt
===================================================================
--- 3rdparty/zlib/CMakeLists.txt	(revision 9064)
+++ 3rdparty/zlib/CMakeLists.txt	(working copy)
@@ -90,6 +90,10 @@
         ARCHIVE_OUTPUT_DIRECTORY ${3P_LIBRARY_OUTPUT_PATH}
     )
 
+IF(DEFINED EMGUCV_PLATFORM_TOOLSET)
+  set_target_properties(${ZLIB_LIBRARY} PROPERTIES PLATFORM_TOOLSET ${EMGUCV_PLATFORM_TOOLSET})
+ENDIF()
+
 if(ENABLE_SOLUTION_FOLDERS)
   set_target_properties(${ZLIB_LIBRARY} PROPERTIES FOLDER "3rdparty")
 endif()
Index: cmake/OpenCVDetectTBB.cmake
===================================================================
--- cmake/OpenCVDetectTBB.cmake	(revision 9064)
+++ cmake/OpenCVDetectTBB.cmake	(working copy)
@@ -44,12 +44,20 @@
       else()
         get_filename_component(_TBB_LIB_PATH "${TBB_INCLUDE_DIRS}/../lib" ABSOLUTE)
 
-        if(CMAKE_SYSTEM_PROCESSOR MATCHES amd64*|x86_64* OR MSVC64)
-          set(_TBB_LIB_PATH "${_TBB_LIB_PATH}/intel64")
-        else()
-          set(_TBB_LIB_PATH "${_TBB_LIB_PATH}/ia32")
-        endif()
-
+		if (MSVC)
+            if(CMAKE_CL_64)
+                set(_TBB_LIB_PATH "${_TBB_LIB_PATH}/intel64")
+            else()
+                set(_TBB_LIB_PATH "${_TBB_LIB_PATH}/ia32")
+            endif()
+        else(MSVC)
+            if(${CMAKE_SYSTEM_PROCESSOR} MATCHES amd64*|x86_64* OR MSVC64)
+                set(_TBB_LIB_PATH "${_TBB_LIB_PATH}/intel64")
+            elseif(${CMAKE_SYSTEM_PROCESSOR} MATCHES x86*|i386*|i686*)
+                set(_TBB_LIB_PATH "${_TBB_LIB_PATH}/ia32")
+            endif()
+        endif(MSVC)
+		
         if(MSVC80)
           set(_TBB_LIB_PATH "${_TBB_LIB_PATH}/vc8")
         elseif(MSVC90)
Index: cmake/OpenCVModule.cmake
===================================================================
--- cmake/OpenCVModule.cmake	(revision 9064)
+++ cmake/OpenCVModule.cmake	(working copy)
@@ -460,6 +460,10 @@
     INSTALL_NAME_DIR lib
   )
 
+  IF(DEFINED EMGUCV_PLATFORM_TOOLSET)
+    set_target_properties(${the_module} PROPERTIES PLATFORM_TOOLSET ${EMGUCV_PLATFORM_TOOLSET})
+  ENDIF()
+  
   # For dynamic link numbering convenions
   if(NOT ANDROID)
     # Android SDK build scripts can include only .so files into final .apk
@@ -486,7 +490,7 @@
   endif()
 
   install(TARGETS ${the_module}
-    RUNTIME DESTINATION bin COMPONENT main
+    RUNTIME DESTINATION bin${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER} COMPONENT main
     LIBRARY DESTINATION ${OPENCV_LIB_INSTALL_PATH} COMPONENT main
     ARCHIVE DESTINATION ${OPENCV_LIB_INSTALL_PATH} COMPONENT main
     )
Index: modules/contrib/src/colormap.cpp
===================================================================
--- modules/contrib/src/colormap.cpp	(revision 9064)
+++ modules/contrib/src/colormap.cpp	(working copy)
@@ -513,6 +513,7 @@
             colormap == COLORMAP_HOT ? (colormap::ColorMap*)(new colormap::Hot) :
             colormap == COLORMAP_HSV ? (colormap::ColorMap*)(new colormap::HSV) :
             colormap == COLORMAP_JET ? (colormap::ColorMap*)(new colormap::Jet) :
+            colormap == COLORMAP_RAINBOW ? (colormap::ColorMap*)(new colormap::Rainbow) :
             colormap == COLORMAP_OCEAN ? (colormap::ColorMap*)(new colormap::Ocean) :
             colormap == COLORMAP_PINK ? (colormap::ColorMap*)(new colormap::Pink) :
             colormap == COLORMAP_RAINBOW ? (colormap::ColorMap*)(new colormap::Rainbow) :
Index: modules/core/src/drawing.cpp
===================================================================
--- modules/core/src/drawing.cpp	(revision 9064)
+++ modules/core/src/drawing.cpp	(working copy)
@@ -554,9 +554,9 @@
     int ax, ay;
     int i, j, x, y;
     int x_step, y_step;
-    int cb = ((uchar*)color)[0];
-    int cg = ((uchar*)color)[1];
-    int cr = ((uchar*)color)[2];
+    uchar cb = ((uchar*)color)[0];
+    uchar cg = ((uchar*)color)[1];
+    uchar cr = ((uchar*)color)[2];
     int pix_size = (int)img.elemSize();
     uchar *ptr = img.data, *tptr;
     size_t step = img.step;
@@ -617,9 +617,9 @@
             0 <= y && y < size.height ) \
         {                               \
             tptr = ptr + y*step + x*3;  \
-            tptr[0] = (uchar)cb;        \
-            tptr[1] = (uchar)cg;        \
-            tptr[2] = (uchar)cr;        \
+            tptr[0] = cb;        \
+            tptr[1] = cg;        \
+            tptr[2] = cr;        \
         }
 
         ICV_PUT_POINT((pt2.x + (XY_ONE >> 1)) >> XY_SHIFT,
@@ -660,7 +660,7 @@
             0 <= y && y < size.height ) \
         {                           \
             tptr = ptr + y*step + x;\
-            tptr[0] = (uchar)cb;    \
+            tptr[0] = cb;    \
         }
 
         ICV_PUT_POINT((pt2.x + (XY_ONE >> 1)) >> XY_SHIFT,
Index: modules/gpu/src/match_template.cpp
===================================================================
--- modules/gpu/src/match_template.cpp	(revision 9064)
+++ modules/gpu/src/match_template.cpp	(working copy)
@@ -49,6 +49,7 @@
 #if !defined (HAVE_CUDA)
 
 void cv::gpu::matchTemplate(const GpuMat&, const GpuMat&, GpuMat&, int, Stream&) { throw_nogpu(); }
+void cv::gpu::matchTemplate(const GpuMat&, const GpuMat&, GpuMat&, int, MatchTemplateBuf&, Stream&) { throw_nogpu(); }
 
 #else
 
Index: modules/gpu/src/split_merge.cpp
===================================================================
--- modules/gpu/src/split_merge.cpp	(revision 9064)
+++ modules/gpu/src/split_merge.cpp	(working copy)
@@ -96,12 +96,13 @@
         CV_Assert(single_channel_only);
         CV_Assert(total_channels <= 4);
 
+        dst.create(size, CV_MAKETYPE(depth, total_channels));
         if (total_channels == 1)
-            src[0].copyTo(dst);
+        {
+            cudaSafeCall( cudaMemcpy2DAsync(dst.data, dst.step, src[0].data, src[0].step, src[0].cols * src[0].elemSize(), src[0].rows, cudaMemcpyDeviceToDevice, stream) );
+        }
         else
         {
-            dst.create(size, CV_MAKETYPE(depth, total_channels));
-
             DevMem2Db src_as_devmem[4];
             for(size_t i = 0; i < n; ++i)
                 src_as_devmem[i] = src[i];
@@ -129,7 +130,8 @@
 
         if (num_channels == 1)
         {
-            src.copyTo(dst[0]);
+            dst[0].create(src.size(), depth);
+            cudaSafeCall( cudaMemcpy2DAsync(dst[0].data, dst[0].step, src.data, src.step, src.cols * src.elemSize(), src.rows, cudaMemcpyDeviceToDevice, stream) );
             return;
         }
 
Index: modules/highgui/CMakeLists.txt
===================================================================
--- modules/highgui/CMakeLists.txt	(revision 9064)
+++ modules/highgui/CMakeLists.txt	(working copy)
@@ -246,22 +246,13 @@
   #                     COMMAND ${CMAKE_COMMAND} -E copy "${ffmpeg_path}" "${EXECUTABLE_OUTPUT_PATH}/$<CONFIGURATION>/${ffmpeg_bare_name_ver}"
   #                     COMMENT "Copying ${ffmpeg_path} to the output directory")
   #else
-  if(MSVC_IDE)
-    add_custom_command(TARGET ${the_module} POST_BUILD
-                       COMMAND ${CMAKE_COMMAND} -E copy "${ffmpeg_path}" "${EXECUTABLE_OUTPUT_PATH}/Release/${ffmpeg_bare_name_ver}"
-                       COMMAND ${CMAKE_COMMAND} -E copy "${ffmpeg_path}" "${EXECUTABLE_OUTPUT_PATH}/Debug/${ffmpeg_bare_name_ver}"
-                       COMMENT "Copying ${ffmpeg_path} to the output directory")
-  elseif(MSVC)
-    add_custom_command(TARGET ${the_module} POST_BUILD
-                       COMMAND ${CMAKE_COMMAND} -E copy "${ffmpeg_path}" "${EXECUTABLE_OUTPUT_PATH}/${CMAKE_BUILD_TYPE}/${ffmpeg_bare_name_ver}"
-                       COMMENT "Copying ${ffmpeg_path} to the output directory")
-  else()
-    add_custom_command(TARGET ${the_module} POST_BUILD
-                       COMMAND ${CMAKE_COMMAND} -E copy "${ffmpeg_path}" "${EXECUTABLE_OUTPUT_PATH}/${ffmpeg_bare_name_ver}"
-                       COMMENT "Copying ${ffmpeg_path} to the output directory")
-  endif()
 
-  install(FILES "${ffmpeg_path}" DESTINATION bin COMPONENT main RENAME "${ffmpeg_bare_name_ver}")
+  add_custom_command(TARGET ${the_module} POST_BUILD
+                     COMMAND ${CMAKE_COMMAND} -E copy "${ffmpeg_path}" "${EXECUTABLE_OUTPUT_PATH}${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER}/${ffmpeg_bare_name_ver}"
+                     COMMENT "Copying ${ffmpeg_path} to the output directory")
+
+  install(FILES "${ffmpeg_path}" DESTINATION bin${UNMANAGED_LIBRARY_OUTPUT_SUBFOLDER} COMPONENT main RENAME "${ffmpeg_bare_name_ver}")
+
 endif()
 
 ocv_add_accuracy_tests()
Index: modules/highgui/include/opencv2/highgui/highgui_c.h
===================================================================
--- modules/highgui/include/opencv2/highgui/highgui_c.h	(revision 9064)
+++ modules/highgui/include/opencv2/highgui/highgui_c.h	(working copy)
@@ -534,6 +534,9 @@
 // Return the type of the capturer (eg, CV_CAP_V4W, CV_CAP_UNICAP), which is unknown if created with CV_CAP_ANY
 CVAPI(int)    cvGetCaptureDomain( CvCapture* capture);
 
+// Return a pointer to the xn::Context of OpenNI from the CvCapture)
+CVAPI(void*) cvGetOpenniCaptureContext( CvCapture* capture);
+
 /* "black box" video file writer structure */
 typedef struct CvVideoWriter CvVideoWriter;
 
Index: modules/highgui/src/cap_openni.cpp
===================================================================
--- modules/highgui/src/cap_openni.cpp	(revision 9064)
+++ modules/highgui/src/cap_openni.cpp	(working copy)
@@ -449,6 +449,8 @@
 
     bool isOpened() const;
 
+    xn::Context* getOpenNIContext() { return &context; }
+
 protected:
     struct OutputMap
     {
@@ -1376,4 +1378,10 @@
     return 0;
 }
 
+// Return a pointer to the xn::Context of OpenNI from the CvCapture)
+void* cvGetOpenniCaptureContext( CvCapture* capture)
+{
+   CvCapture_OpenNI* openniCapture = (CvCapture_OpenNI*) capture;
+   return openniCapture->getOpenNIContext();
+}
 #endif
Index: modules/legacy/src/3dtracker.cpp
===================================================================
--- modules/legacy/src/3dtracker.cpp	(revision 9064)
+++ modules/legacy/src/3dtracker.cpp	(working copy)
@@ -322,7 +322,7 @@
     int i;
     int x, y;
     CvPoint prev_pt = { 0, 0 };
-    static const CvScalar rgb_colors[] = {
+    static CvScalar rgb_colors[] = {
         {{0,0,255}},
         {{0,128,255}},
         {{0,200,200}},
@@ -330,10 +330,10 @@
         {{200,200,0}},
         {{255,0,0}},
         {{255,0,255}} };
-    static const CvScalar gray_colors[] = {
+    static CvScalar gray_colors[] = {
         {{80}}, {{120}}, {{160}}, {{200}}, {{100}}, {{140}}, {{180}}
     };
-    const CvScalar* colors = img->nChannels == 3 ? rgb_colors : gray_colors;
+    CvScalar* colors = img->nChannels == 3 ? rgb_colors : gray_colors;
 
     CvScalar color = colors[0];
     for (y = 0, i = 0; y < etalon_size.height; y++)
Index: modules/objdetect/src/latentsvm.cpp
===================================================================
--- modules/objdetect/src/latentsvm.cpp	(revision 9064)
+++ modules/objdetect/src/latentsvm.cpp	(working copy)
@@ -277,7 +277,7 @@
 
 
     // Matching
-#ifdef HAVE_TBB
+#if 0
     if (numThreads <= 0)
     {
         opResult = LATENT_SVM_TBB_NUMTHREADS_NOT_CORRECT;
