Index: include/opencv/cxcore.h
===================================================================
--- include/opencv/cxcore.h	(revision 2026)
+++ include/opencv/cxcore.h	(working copy)
@@ -1530,6 +1530,8 @@
 typedef int (CV_CDECL *CvErrorCallback)( int status, const char* func_name,
                     const char* err_msg, const char* file_name, int line, void* userdata );
 
+static CvErrorCallback customCvErrorCallback = 0;
+
 /* Assigns a new error-handling function */
 CVAPI(CvErrorCallback) cvRedirectError( CvErrorCallback error_handler,
                                        void* userdata CV_DEFAULT(NULL),
Index: src/cxcore/cxsystem.cpp
===================================================================
--- src/cxcore/cxsystem.cpp	(revision 2026)
+++ src/cxcore/cxsystem.cpp	(working copy)
@@ -173,6 +173,12 @@
     static volatile int* p = 0;
     *p = 0;
 #endif
+    
+    if (customCvErrorCallback != 0) 
+    {
+       customCvErrorCallback(exc.code, exc.func.c_str(), exc.err.c_str(), exc.file.c_str(), exc.line, 0);
+       return;
+    }
     throw exc;
 }
 
@@ -244,11 +250,12 @@
     return cv::getThreadNum();
 }
 
-
 CV_IMPL CvErrorCallback
-cvRedirectError( CvErrorCallback, void*, void** )
+cvRedirectError( CvErrorCallback cb, void*, void** )
 {
-    return 0;
+    CvErrorCallback old_CvErrorCallback = customCvErrorCallback;
+    customCvErrorCallback = cb;
+    return old_CvErrorCallback;
 }
 
 CV_IMPL int cvNulDevReport( int, const char*, const char*,
